#!/bin/python

# sol = 15, 22, 35, 37, 45, 46, 52, 53, 54, 57, 58, 61, 62, 63, 71, 73, 74, 75, 79, 83, 85, 86, 91, 94, 95, 100, 101, 102, 106, 107, 110, 113, 115, 118, 120, 122, 127, 129, 130, 131, 132, 133, 134, 137, 138, 139, 141, 142, 143, 145, 146, 149, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 194, 195, 197, 199, 201, 202, 203, 204, 205, 206, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 233, 235, 236, 237, 238, 239, 241, 246, 247, 249, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 293, 295, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 321, 322, 323, 326, 327, 328, 329, 330, 331, 334, 335, 337, 339, 341, 342, 345, 346, 347, 348, 349, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 379, 381, 382, 383, 385, 386, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 449, 451, 453, 454, 455, 456, 457, 458, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 476, 478, 479, 481, 482, 483, 485, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499

set_size = 500
r = np.zeros((set_size+1, set_size+1), dtype=np.int32)
for i in range(1, set_size+1):
    for j in range(1, set_size+1):
        if i!=j and sqrt((i)*(j)) == floor(sqrt((i)*(j))):
            r[i,j] = 1
a, b = np.where(np.triu(r[1:, 1:])==1)
m = gp.Model("find")
X = m.addVars(set_size, vtype=GRB.BINARY, name="X")
m.setObjective(
    gp.quicksum(
        X[i]
        for i in range(len(X))
    ),
    GRB.MAXIMIZE,
)
m.addConstrs(
    (X[i] <= 1-X[j] for i, j in zip(a,b)),
    name="a_or_b_or_neither_constraint",
)
m.optimize()

# Sanity Check
sol = [idx+1 for idx, v in enumerate(m.getVars()) if v.X == 1]
for i in sol:
    for j in sol:
        if i!=j and sqrt((i)*(j)) == floor(sqrt((i)*(j))):
            print('fail')
